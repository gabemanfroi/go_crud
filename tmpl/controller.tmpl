package controllers

import (
	"encoding/json"
	"showcaseme/domain/DTO/{{.ModelName}}"
	"showcaseme/domain/interfaces/services"
	"showcaseme/internal/utils"
	"github.com/gofiber/fiber/v2"
	"github.com/golobby/container/v3"
	"strconv"
)

type {{ title .ModelName }}Controller struct {
	service services.I{{ title .ModelName }}Service
}

func Create{{ title .ModelName }}Controller() *{{ title .ModelName }}Controller {
    return &{{ title .ModelName }}Controller{service: get{{ title .ModelName }}Service()}
}

func get{{ title .ModelName }}Service() services.I{{ title .ModelName }}Service {
	var injector services.I{{ title .ModelName }}Service
	utils.Check(container.Resolve(&injector), "Error while retrieving {{ title .ModelName }}Service instance ")
	return injector
}

func (controller {{ title .ModelName }}Controller) Create(c *fiber.Ctx) error {
	var dto {{ .ModelName }}.Create{{ title .ModelName }}DTO
	if err := c.BodyParser(&dto); err != nil {
		return err
	}

	created{{title .ModelName}}, err := controller.service.Create(&dto)

	if err != nil {
    		return c.Status(400).JSON(err.Error())
    }

	return c.Status(200).JSON(controller.service.Create(&dto))
}

func (controller {{ title .ModelName }}Controller) GetAll(c *fiber.Ctx) error {
	{{ .ModelName }}s, err := controller.service.GetAll()
	if err != nil {
		return err
	}
	utils.Check(json.NewEncoder(c).Encode(&{{ .ModelName }}s), "failed to encode {{ .ModelName }}s")
	return c.Status(200).JSON({{ .ModelName }}s)
}

func (controller {{ title .ModelName }}Controller) GetById(c *fiber.Ctx) error {
	id, err := strconv.ParseUint(c.Params("id"), 10, 32)

	utils.Check(err, "failed to get {{ .ModelName }} id")

	{{initials .ModelName}}, err := controller.service.GetById(uint(id))
	if err != nil {
		return c.Status(404).JSON(err.error())
	}
	utils.Check(json.NewEncoder(c).Encode(&{{initials .ModelName}}), "failed to encode {{ .ModelName }}")
	return c.Status(200).JSON({{initials .ModelName}})
}

func (controller {{ title .ModelName }}Controller) Delete(c *fiber.Ctx) error {
	id, err := strconv.ParseUint(c.Params("id"), 10, 32)

	utils.Check(err, "failed to get {{ .ModelName }} id")
	err = controller.service.Delete(uint(id))
	if err != nil {
		return c.Status(404).JSON(err.error())
	}

	return c.Status(204).JSON("user deleted")
}

func (controller {{ title .ModelName }}Controller) Update(c *fiber.Ctx) error {
	id, err := strconv.ParseUint(c.Params("id"), 10, 32)

	utils.Check(err, "failed to get {{ .ModelName }} id")
	var dto {{ .ModelName }}.Update{{ title .ModelName }}DTO
	if err := c.BodyParser(&dto); err != nil {
		return err
	}
	updated{{ title .ModelName }}, err := controller.service.Update(uint(id), &dto)
	if err != nil {
		return c.Status(404).JSON(err.error())
	}
	return c.Status(200).JSON(updated{{ title .ModelName }})
}
