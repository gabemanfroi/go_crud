package services

import (
	"github.com/gabemanfroi/midgard/domain/DTO/{{ .ModelName }}"
	"github.com/gabemanfroi/midgard/domain/interfaces/repositories"
	"github.com/gabemanfroi/midgard/internal/utils"
	"github.com/golobby/container/v3"
)

type {{ title  .ModelName }}Service struct {
	repository repositories.I{{ title  .ModelName }}Repository
}

func Create{{ title  .ModelName }}Service() *{{ title  .ModelName }}Service { return &{{ title  .ModelName }}Service{repository: get{{ title  .ModelName }}Service()} }

func (service {{ title  .ModelName }}Service) Create(dto *{{ .ModelName }}.Create{{ title  .ModelName }}DTO) *{{ .ModelName }}.Read{{ title  .ModelName }}DTO {
	return service.repository.Create(dto)
}

func (service {{ title  .ModelName }}Service) GetAll() ([]*{{ .ModelName }}.Read{{ title  .ModelName }}DTO, error) {
	return service.repository.GetAll()
}

func (service {{ title  .ModelName }}Service) GetById(id uint) (*{{ .ModelName }}.Read{{ title  .ModelName }}DTO, error) {
	return service.repository.GetById(id)
}

func (service {{ title  .ModelName }}Service) Delete(id uint) error {
	return service.repository.Delete(id)
}

func (service {{ title  .ModelName }}Service) Update(id uint, dto *{{ .ModelName }}.Update{{ title  .ModelName }}DTO) (*{{ .ModelName }}.Read{{ title  .ModelName }}DTO, error) {
	return service.repository.Update(id, dto)
}

func get{{ title  .ModelName }}Service() repositories.I{{ title  .ModelName }}Repository {
	var injector repositories.I{{ title  .ModelName }}Repository
	utils.Check(container.Resolve(&injector), "Error while retrieving {{ title  .ModelName }}Repository instance")
	return injector
}
