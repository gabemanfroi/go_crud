package repositories

import (
	"errors"
	"gorm.io/gorm"
	"showcaseme/domain/DTO/{{ .ModelName }}"
	"showcaseme/domain/models"
	"showcaseme/infra/db"
)

type {{ title .ModelName }}Repository struct {
	sqlClient *gorm.DB
}

func Create{{ title .ModelName }}Repository() *{{ title .ModelName }}Repository {
	return &{{ title .ModelName }}Repository{sqlClient: db.GetSqlInstance()}
}

func (repository {{ title .ModelName }}Repository) Create(dto *{{ .ModelName }}.Create{{ title .ModelName }}DTO) (*{{ .ModelName }}.Read{{ title .ModelName }}DTO, error) {
	{{ initials .ModelName }} := models.{{ title .ModelName }}{
    {{- range $property := .CreateProperties }}
        {{ $property }}: dto.{{$property}},
    {{- end}}
	}
	repository.sqlClient.Create(&{{ initials .ModelName }})

	if {{ initials .ModelName }}.ID == 0 {
		return nil, errors.New("an error has occured when creating your {{ .ModelName }}, verify")
	}

	created{{ title .ModelName }}, _ := repository.GetById({{ initials .ModelName }}.ID)

	return created{{ title .ModelName }}, nil
}

func (repository {{ title .ModelName }}Repository) GetAll() ([]*{{ .ModelName }}.Read{{ title .ModelName }}DTO, error) {
	var {{ .ModelName }}s []*models.{{ title .ModelName }}
	var {{ .ModelName }}DTOs []*{{ .ModelName }}.Read{{ title .ModelName }}DTO

	repository.sqlClient.Find(&{{ .ModelName }}s)

	for _, {{ initials .ModelName }} := range {{ .ModelName }}s {
		{{ .ModelName }}DTOs = append({{ .ModelName }}DTOs, &{{ .ModelName }}.Read{{ title .ModelName }}DTO{})
	}

	return {{ .ModelName }}DTOs, nil
}

func (repository {{ title .ModelName }}Repository) GetById(id uint) (*{{ .ModelName }}.Read{{ title .ModelName }}DTO, error) {
	var {{ initials .ModelName }} *models.{{ title .ModelName }}

	repository.sqlClient.Find(&{{ initials .ModelName }}, id)

	if {{ initials .ModelName }}.ID == 0 {
		return nil, errors.New("{{ .ModelName }} not found")
	}

	return &{{ .ModelName }}.Read{{ title .ModelName }}DTO{
    {{- range $property := .ReadProperties }}
        {{ $property }}: {{ initials $.ModelName }}.{{$property}},
    {{- end}}
	}, nil
}

func (repository {{ title .ModelName }}Repository) Delete(id uint) error {
	var {{ initials .ModelName }} models.{{ title .ModelName }}
	repository.sqlClient.Find(&{{ initials .ModelName }}, id)
	if {{ initials .ModelName }}.ID == 0 {
		return errors.New("{{ .ModelName }} not found")
	}
	repository.sqlClient.Delete(&{{ initials .ModelName }})
	return nil
}

func (repository {{ title .ModelName }}Repository) Update(id uint, dto *{{ .ModelName }}.Update{{ title .ModelName }}DTO) (*{{ .ModelName }}.Read{{ title .ModelName }}DTO, error) {
	var {{ initials .ModelName }} models.{{ title .ModelName }}
	
	repository.sqlClient.Find(&{{ initials .ModelName }}, id)

	if {{ initials .ModelName }}.ID == 0 {
		return nil, errors.New("{{ .ModelName }} not found")
	}

	update{{ title .ModelName }}ValuesFromDTO(&{{ initials .ModelName }}, dto)
	repository.sqlClient.Save(&{{ initials .ModelName }})

	updated{{ title .ModelName }}, _ := repository.GetById({{ initials .ModelName }}.ID)

	return updated{{ title .ModelName }}, nil
}

func update{{ title .ModelName }}ValuesFromDTO(model *models.{{ title .ModelName }}, dto *{{ .ModelName }}.Update{{ title .ModelName }}DTO) {
    {{- range $property := .UpdateProperties }}
    if dto.{{ $property }} != nil{
        model.{{ $property }} = *dto.{{ $property }}
    }
    {{- end }}
}


